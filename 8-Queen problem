def is_safe(board, row, col):
    # Check same column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper left diagonal
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper right diagonal
    for i, j in zip(range(row-1, -1, -1), range(col+1, 8)):
        if board[i][j] == 1:
            return False

    return True

def solve_queens(board, row):
    if row == 8:
        return True

    for col in range(8):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen

            if solve_queens(board, row + 1):
                return True

            board[row][col] = 0  # Backtrack

    return False

def print_board(board):
    for row in board:
        line = ""
        for col in row:
            line += "Q " if col == 1 else ". "
        print(line)
    print()

# Create an 8x8 board with all 0s
board = [[0 for _ in range(8)] for _ in range(8)]

if solve_queens(board, 0):
    print("8-Queens Solution:")
    print_board(board)
else:
    print("No solution found.")
