from queue import PriorityQueue

# Define the graph
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'D': 2, 'E': 5},
    'C': {'F': 3},
    'D': {'G': 1},
    'E': {'G': 2},
    'F': {'G': 2},
    'G': {}
}

# Heuristic values (estimated cost to goal)
heuristic = {
    'A': 7, 'B': 6, 'C': 5,
    'D': 3, 'E': 2, 'F': 2,
    'G': 0
}

def a_star(start, goal):
    pq = PriorityQueue()
    pq.put((0, start))
    came_from = {}
    cost = {start: 0}

    while not pq.empty():
        _, current = pq.get()

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for neighbor, weight in graph[current].items():
            new_cost = cost[current] + weight
            if neighbor not in cost or new_cost < cost[neighbor]:
                cost[neighbor] = new_cost
                priority = new_cost + heuristic[neighbor]
                pq.put((priority, neighbor))
                came_from[neighbor] = current

    return None

# Run the algorithm
path = a_star('A', 'G')
print("Path:", path)
