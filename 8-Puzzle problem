from collections import deque

# Goal state
goal = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]]

# Move directions: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def is_goal(state):
    return state == goal

def copy_state(state):
    return [row[:] for row in state]

def bfs(start):
    queue = deque()
    visited = set()
    queue.append((start, []))

    while queue:
        state, path = queue.popleft()
        visited.add(str(state))

        if is_goal(state):
            return path + [state]

        x, y = get_blank_position(state)

        for dx, dy in moves:
            nx, ny = x + dx, y + dy

            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = copy_state(state)
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]

                if str(new_state) not in visited:
                    queue.append((new_state, path + [state]))

    return None

def print_state(state):
    for row in state:
        print(" ".join(str(x) if x != 0 else "_" for x in row))
    print()

# Example start state
start = [[1, 2, 3],
         [4, 0, 6],
         [7, 5, 8]]

solution = bfs(start)

if solution:
    print("Steps to solve the 8-puzzle:")
    for step, state in enumerate(solution):
        print(f"Step {step}:")
        print_state(state)
else:
    print("No solution found.")
